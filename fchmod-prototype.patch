our glibc already defines fchmod prototype, but with c++ extension
mismatch causes compile error:

/usr/include/sys/stat.h:299:47: error: declaration of 'int fchmod(int, __mode_t) throw ()' throws different exceptions
../port.h:32:12: error: from previous declaration 'int fchmod(int, mode_t)'

glibc-headers-2.12.1-1.x86_64

Signed-off-by: Elan Ruusam√§e <glen@pld-linux.org>

--- hylafax-4.4.6/configure~	2009-12-28 21:06:52.000000000 +0200
+++ hylafax-4.4.6/configure	2010-08-24 00:39:02.960977100 +0300
@@ -2782,7 +2782,7 @@
     CheckForFunc fchmod && {
 	echo '#define HAS_FCHMOD 1'
 	Note "... configure use of fchmod"
-	CheckFuncDecl fchmod 'extern int fchmod(int, mode_t);' \
+	CheckFuncDecl fchmod 'extern int fchmod(int, mode_t) __THROW;' \
 	    unistd.h libc.h $OSFCNH sys/stat.h
     }
     CheckFuncDecl mknod 'extern int mknod(const char*, mode_t, dev_t);' \
